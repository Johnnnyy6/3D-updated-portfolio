/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Chris (https://sketchfab.com/cebbi)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/isometric-world-c174ea7809c64fbebf6795f1fbfafb90
Title: Isometric World
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import islandScene from '../assets/3d/island.glb'
import {a} from '@react-spring/three'


const Island = ({isRotating, setIsRotating, ...props}) => {
  const {gl,viewport} = useThree();
  const lastX = useRef(0);
  const rotationSpeed = useRef(0);
  const islandRef = useRef();
  const { nodes, materials } = useGLTF(islandScene)
  const dampingFactor = 0.95;
  const handlePointerDown = (e) => {
    e.stopProgation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = event.touches ? event.touches[0].clientX : event.clientX;
    lastX.current = clientX;
  }
  const handlePointerUp = (e) => {
    e.stopProgation();
    e.preventDefault();
    setIsRotating(false);

    const clientX = event.touches ? event.touches[0].clientX : event.clientX;
    const delta = (clientX - lastX.current) / viewport.width;
    islandRef.current.rotation.y += delta * 0.01 * Math.PI;
    lastX.current = clientX;
    rotationSpeed.current = delta * 0.01 * Math.PI;


  }
  const handlePointerMove = (e) => {
    e.stopProgation();
    e.preventDefault();

    if(isRotating){
      handlePointerUp(e);
    }
  }

  const handleKeyDown = (e) => {
    if(e.key === "ArrowLeft"){
      if(!isRotating) setIsRotating(true);
      islandRef.current.rotation.y += 0.01 * Math.PI;
    } else if(e.key === 'ArrowRight'){
      if(!isRotating) setIsRotating(true);
      islandRef.current.rotation.y -= 0.01 * Math.PI;
    }
  }

  useEffect(()=> {
    document.addEventListener('pointerdown', handlePointerDown);
    document.addEventListener('pointerup', handlePointerUp);
    document.addEventListener('pointermove', handlePointerMove);

    return () => {
      document.removeEventListener('pointerdown', handlePointerDown);
      document.removeEventListener('pointerup', handlePointerUp);
      document.removeEventListener('pointermove', handlePointerMove);
    }

  },[gl, handlePointerDown,handlePointerMove,handlePointerUp])


  return (
    <a.group ref = {islandRef} {...props} >
      <mesh
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  )
}

export default Island